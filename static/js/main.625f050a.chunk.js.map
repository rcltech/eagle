{"version":3,"sources":["App.tsx","serviceWorker.ts","config/theme.ts","index.tsx"],"names":["App","className","Typography","color","Boolean","window","location","hostname","match","theme","responsiveFontSizes","createMuiTheme","palette","primary","light","main","dark","secondary","background","default","error","ReactDOM","render","useState","client","setClient","useEffect","link","HttpLink","uri","cache","InMemoryCache","ApolloClient","persistCache","storage","sessionStorage","then","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+LAaeA,EAVO,WACpB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAACC,EAAA,EAAD,CAAYC,MAAO,WAAnB,mBCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCZOC,EAAeC,YAC1BC,YAAe,CACbC,QAAS,CACPC,QAAS,CACPC,MAAO,UACPC,KAAM,UACNC,KAAM,WAERC,UAAW,CACTF,KAAM,WAERG,WAAY,CACVC,QAAS,QAEXC,MAAO,CACLL,KAAM,e,wDC0CdM,IAASC,OAAO,mBA9CQ,WAAO,IAAD,EACAC,mBAElB,MAHkB,mBACrBC,EADqB,KACbC,EADa,KAkC5B,OA7BAC,qBAAU,WAER,IAKMC,EAAO,IAAIC,IAAS,CACxBC,IAHI,wCASAC,EAAQ,IAAIC,IAEZP,EAAS,IAAIQ,IAAa,CAC9BF,QACAH,SAGFM,uBAAa,CACXH,QACAI,QAAS7B,OAAO8B,iBAGfC,MAAK,kBAAMX,EAAUD,SAGrBA,EAGH,kBAAC,IAAD,CAAgBA,OAAQA,GACtB,kBAACa,EAAA,EAAD,CAAe5B,MAAOA,GACpB,kBAAC6B,EAAA,EAAD,MACA,kBAAC,EAAD,QANc,iDAYN,MAAWC,SAASC,eAAe,SF4E7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMP,MAAK,SAAAQ,GACjCA,EAAaC,kB","file":"static/js/main.625f050a.chunk.js","sourcesContent":["import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Typography color={\"primary\"}>Hello, World</Typography>\n      </header>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  createMuiTheme,\n  responsiveFontSizes,\n  Theme,\n} from \"@material-ui/core/styles\";\n\nexport const theme: Theme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      primary: {\n        light: \"#727394\",\n        main: \"#464866\",\n        dark: \"#1d213b\",\n      },\n      secondary: {\n        main: \"#ef9a9a\",\n      },\n      background: {\n        default: \"#fff\",\n      },\n      error: {\n        main: \"#B00020\",\n      },\n    },\n  })\n);\n","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { theme } from \"./config/theme\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { persistCache } from \"apollo-cache-persist\";\nimport { PersistentStorage, PersistedData } from \"apollo-cache-persist/types\";\n\nconst Index: React.FC = () => {\n  const [client, setClient] = useState<ApolloClient<\n    NormalizedCacheObject\n  > | null>(null);\n\n  useEffect(() => {\n    // const authorization: string = localStorage.getItem(\"id\");\n    const uri: string =\n      process.env.NODE_ENV === \"development\"\n        ? \"http://localhost:4000/graphql\"\n        : \"https://phoenix.rctech.club/graphql\";\n\n    const link = new HttpLink({\n      uri,\n      // headers: {\n      //   authorization,\n      // },\n    });\n\n    const cache = new InMemoryCache();\n\n    const client = new ApolloClient({\n      cache,\n      link,\n    });\n\n    persistCache({\n      cache,\n      storage: window.sessionStorage as PersistentStorage<\n        PersistedData<NormalizedCacheObject>\n      >,\n    }).then(() => setClient(client));\n  });\n\n  if (!client) return <>loading</>;\n\n  return (\n    <ApolloProvider client={client}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}