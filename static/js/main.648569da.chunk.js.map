{"version":3,"sources":["graphql/booking.ts","components/Bookings/TablePaginationActions.tsx","components/Bookings/Actions.tsx","components/Bookings/BookingTable.tsx","App.tsx","serviceWorker.ts","config/theme.ts","index.tsx"],"names":["GET_ALL_BOOKINGS","gql","useStyles","makeStyles","theme","createStyles","root","flexShrink","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onChangePage","className","IconButton","onClick","event","disabled","aria-label","direction","Math","ceil","max","optionsButton","height","width","marginRight","Actions","email","useState","anchorEl","setAnchorEl","open","Boolean","handleClose","aria-controls","aria-haspopup","currentTarget","size","Menu","id","keepMounted","onClose","MenuItem","alert","Typography","variant","component","Link","color","underline","href","target","referrerPolicy","margin","createData","booking","room","name","start","end","actions","user","defaultRows","Date","columns","label","minWidth","align","format","value","toISOString","BookingTable","setPage","setRowsPerPage","rows","setRows","useQuery","data","loading","error","useEffect","bookings","map","console","log","TableContainer","Paper","Table","TableHead","TableRow","column","TableCell","key","style","TableBody","slice","row","index","hover","role","tabIndex","Object","prototype","toString","call","TableFooter","TablePagination","rowsPerPageOptions","length","newPage","onChangeRowsPerPage","parseInt","ActionsComponent","App","window","location","hostname","match","responsiveFontSizes","createMuiTheme","palette","primary","light","main","dark","secondary","background","default","ReactDOM","render","client","setClient","authorization","localStorage","getItem","link","HttpLink","uri","headers","cache","InMemoryCache","ApolloClient","persistCache","storage","sessionStorage","then","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.648569da.chunk.js","sourcesContent":["import { gql } from \"apollo-boost\";\n\nexport const GET_ALL_BOOKINGS = gql`\n  query bookings {\n    bookings {\n      start\n      end\n      room {\n        name\n      }\n      user {\n        email\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport {\n  makeStyles,\n  useTheme,\n  Theme,\n  createStyles,\n} from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\n\ninterface TablePaginationActionsProps {\n  count: number;\n  page: number;\n  rowsPerPage: number;\n  onChangePage: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number\n  ) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexShrink: 0,\n      marginLeft: theme.spacing(2.5),\n    },\n  })\n);\n\nexport const TablePaginationActions = (props: TablePaginationActionsProps) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ): void => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={classes.root}>\n      <IconButton\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport Menu from \"@material-ui/core/Menu\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\n\ninterface ActionsProps {\n  email: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    optionsButton: {\n      height: \"18px\",\n      width: \"18px\",\n      marginRight: theme.spacing(1),\n    },\n  })\n);\n\nexport const Actions: React.FC<ActionsProps> = props => {\n  const classes = useStyles();\n  const { email } = props;\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>): void => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (): void => {\n    setAnchorEl(null);\n  };\n\n  const handleDeleteClick = (): void => {\n    alert(\"delete clicked\");\n    handleClose();\n  };\n\n  return (\n    <>\n      <IconButton\n        aria-label=\"more\"\n        aria-controls=\"more actions\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n        size=\"small\"\n      >\n        <MoreVertIcon />\n      </IconButton>\n      <Menu\n        id=\"more actions\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleClose}\n      >\n        <MenuItem onClick={handleDeleteClick}>\n          <DeleteIcon className={classes.optionsButton} />\n          <Typography variant={\"body2\"}>Delete</Typography>\n        </MenuItem>\n        <MenuItem\n          onClick={handleClose}\n          component={Link}\n          color=\"inherit\"\n          underline=\"none\"\n          href={`mailto:${email}`}\n          target=\"_blank\"\n          referrerPolicy=\"no-referrer\"\n        >\n          <EmailIcon className={classes.optionsButton} />\n          <Typography variant={\"body2\"}>Email user</Typography>\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableFooter from \"@material-ui/core/TableFooter\";\nimport TablePagination from \"@material-ui/core/TablePagination\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { GET_ALL_BOOKINGS } from \"../../graphql/booking\";\nimport { TablePaginationActions } from \"./TablePaginationActions\";\nimport { Actions } from \"./Actions\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"96vw\",\n      margin: \"auto\",\n    },\n  })\n);\n\ninterface Booking {\n  room: {\n    name: string;\n  };\n  start: Date;\n  end: Date;\n  user: {\n    email: string;\n  };\n}\n\ntype Row = {\n  room: string;\n  start: Date;\n  end: Date;\n  actions: React.ReactNode;\n};\n\nconst createData = (booking: Booking): Row => {\n  return {\n    room: booking.room.name,\n    start: booking.start,\n    end: booking.end,\n    actions: <Actions email={booking.user.email} />,\n  };\n};\n\nconst defaultRows = [\n  createData({\n    room: { name: \"example room\" },\n    start: new Date(),\n    end: new Date(),\n    user: { email: \"example user\" },\n  }),\n];\n\ntype Column = {\n  id: \"room\" | \"start\" | \"end\" | \"actions\";\n  label: string;\n  minWidth?: number;\n  align?: \"left\" | \"center\" | \"right\";\n  format?: (value: Date) => string;\n};\n\nconst columns: Column[] = [\n  { id: \"room\", label: \"Booking room\", minWidth: 100 },\n  {\n    id: \"start\",\n    label: \"Time in\",\n    minWidth: 200,\n    align: \"center\",\n    format: (value: Date): string => value.toISOString(),\n  },\n  {\n    id: \"end\",\n    label: \"Time out\",\n    minWidth: 200,\n    align: \"center\",\n    format: (value: Date): string => value.toISOString(),\n  },\n  {\n    id: \"actions\",\n    label: \"\",\n    minWidth: 30,\n    align: \"right\",\n  },\n];\n\nexport const BookingTable: React.FC = () => {\n  const classes = useStyles();\n  const [page, setPage] = useState<number>(0);\n  const [rowsPerPage, setRowsPerPage] = useState<number>(5);\n  const [rows, setRows] = useState<Row[]>(defaultRows);\n\n  const { data, loading, error } = useQuery(GET_ALL_BOOKINGS);\n\n  useEffect(() => {\n    if (data && data.bookings) {\n      const rows: Row[] = data.bookings.map((booking: Booking) =>\n        createData(booking)\n      );\n      setRows(rows);\n    }\n  }, [data]);\n\n  if (loading) return <>loading</>;\n  if (error) console.log(error);\n\n  const handleChangePage = (\n    event: React.MouseEvent<HTMLButtonElement> | null,\n    newPage: number\n  ): void => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>\n  ): void => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  return (\n    <TableContainer component={Paper} classes={{ root: classes.root }}>\n      <Table size=\"small\" aria-label=\"bookings table\">\n        <TableHead>\n          <TableRow>\n            {columns.map(column => (\n              <TableCell\n                key={column.id}\n                align={column.align}\n                style={{ minWidth: column.minWidth }}\n              >\n                {column.label}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows\n            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n            .map((row, index) => (\n              <TableRow hover role=\"checkbox\" tabIndex={-1} key={index}>\n                {columns.map(column => {\n                  const value = row[column.id];\n                  return (\n                    <TableCell key={column.id} align={column.align}>\n                      {column.format &&\n                      Object.prototype.toString.call(value) === \"[object Date]\"\n                        ? column.format(value as Date)\n                        : value}\n                    </TableCell>\n                  );\n                })}\n              </TableRow>\n            ))}\n        </TableBody>\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[5, 10]}\n              count={rows.length}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n};\n","import React from \"react\";\nimport { BookingTable } from \"./components/Bookings/BookingTable\";\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <BookingTable />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  createMuiTheme,\n  responsiveFontSizes,\n  Theme,\n} from \"@material-ui/core/styles\";\n\nexport const theme: Theme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      primary: {\n        light: \"#727394\",\n        main: \"#464866\",\n        dark: \"#1d213b\",\n      },\n      secondary: {\n        main: \"#ef9a9a\",\n      },\n      background: {\n        default: \"#fff\",\n      },\n      error: {\n        main: \"#B00020\",\n      },\n    },\n  })\n);\n","import React, { useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { theme } from \"./config/theme\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport {\n  ApolloClient,\n  HttpLink,\n  InMemoryCache,\n  NormalizedCacheObject,\n} from \"apollo-boost\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { persistCache } from \"apollo-cache-persist\";\nimport { PersistentStorage, PersistedData } from \"apollo-cache-persist/types\";\n\nconst Index: React.FC = () => {\n  const [client, setClient] = useState<ApolloClient<\n    NormalizedCacheObject\n  > | null>(null);\n\n  useEffect(() => {\n    const authorization: string | null = localStorage.getItem(\"id\");\n    const uri: string =\n      process.env.NODE_ENV === \"development\"\n        ? \"http://localhost:4000/graphql\"\n        : \"https://phoenix.rctech.club/graphql\";\n\n    const link = new HttpLink({\n      uri,\n      headers: {\n        authorization,\n      },\n    });\n\n    const cache = new InMemoryCache();\n\n    const client = new ApolloClient({\n      cache,\n      link,\n    });\n\n    persistCache({\n      cache,\n      storage: window.sessionStorage as PersistentStorage<\n        PersistedData<NormalizedCacheObject>\n      >,\n    }).then(() => setClient(client));\n  }, []);\n\n  if (!client) return <>loading</>;\n\n  return (\n    <ApolloProvider client={client}>\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <App />\n      </ThemeProvider>\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<Index />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}